<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/06/08/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>“我的第一篇博客”</title>
    <url>/2020/06/08/%E2%80%9C%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E2%80%9D/</url>
    <content><![CDATA[<hr>
<p>这还行来</p>
 <a id="more"></a> 

<p>今下午四点开始睡觉，一觉睡到将近七点，晚上这可咋睡，丢儿。。。。</p>
]]></content>
  </entry>
  <entry>
    <title>我的第二篇博客</title>
    <url>/2020/06/09/%E6%88%91%E7%9A%84%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>#冲冲冲！</p>
]]></content>
  </entry>
  <entry>
    <title>第一章Java程序概述（三）</title>
    <url>/2020/06/13/%E7%AC%AC%E4%B8%80%E7%AB%A0Java%E7%A8%8B%E5%BA%8F%E6%A6%82%E8%BF%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<p><img src="/2020/06/13/%E7%AC%AC%E4%B8%80%E7%AB%A0Java%E7%A8%8B%E5%BA%8F%E6%A6%82%E8%BF%B0%EF%BC%88%E4%B8%89%EF%BC%89/a.jpg" alt="a"></p>
<p>晒下我的桌面，拍照技术菜的一批。。。</p>
<a id="more"></a> 

<p>六、字符串</p>
<p>1String a=””; //空字符串</p>
<p>String b=”sdfdsfg”;</p>
<p>每个用双引号括起来的字符串都是String类型的一个示例（对象）。</p>
<p>2提取一个子串</p>
<p>String类里的substring方法可以从一个较大的字符串里提取一个子串，如：</p>
<p>String greeting=”Hello”;</p>
<p>String s=greeting.substring(0,3);//即Hel，这里复制位置0，1，2的字符，从0开始，到3截止但不包括3</p>
<p>Java字符串中的代码单元和代码点从0开始计数。</p>
<p>substring的优点：容易计算子串的长度，如字符串s.substring(a,b)的长度是b-a。</p>
<p>3拼接字符串</p>
<p>3.1Java语言可以用+号按顺序拼接字符串。</p>
<p>String a=”asdaf “;<br>String b=”dsfrg”;<br>System.out.println(a+b);控制台输出asdaf dsfrg，因为a字符串有个空格</p>
<p>3.2任何一个Java对象都可以转换成一个字符串，当字符串和一个非字符串（前提是一个对象）的值进行拼接时非字符串会转换成字符串，如：</p>
<p>String a = “The answer is “;<br>String b = 16 + a;//16被当作了一个对象<br>System.out.println(b);//控制台输出The answer is 16<br>System.out.println(“The answer is “ + www);//www被当作了一个变量，所以编译出错</p>
<p>这种特性通常用在输出语句中。</p>
<p>3.3如果需要将多个字符串拼接起来，且各个字符串之间用界定符分隔，可以使用静态join方法，如：</p>
<p>String abc=String.join(<strong>“/“,”S”,”M”,”L”,”K”</strong>)<strong>;//这里充当界定符的/也可以换成其他<br>System.</strong>out<strong>.println</strong>(<strong>abc</strong>)**;//控制台输出S/M/L/K，/被当作界定符使用</p>
<p>3.4Java11中还提供了一个repeat方法：</p>
<p>String def=”java”.repeat<strong>(</strong>3<strong>)</strong>;<br>System.<strong>out</strong>.println<strong>(</strong>def<strong>)</strong>;//控制台输出javajavajava</p>
<p>4字符串是不可变的</p>
<p>4.1String类中没有提供修改字符串中某个字符的方法。</p>
<p>4.2String s=”Hello”;</p>
<p>如果想将字符串s里最后两个位置的字符修改成p和！，可以提取字符串s中想保留的子串，再与想替换的字符拼接：</p>
<p>s=s.substring(0,3)+”p!”;//但是这种先提取再拼接的效率并不高</p>
<p>4.3在Java中不能修改字符串里的单个字符，即”Hello”永远包含H，e,l,l,o这几个字符。但是可以改变其引用变量s,即让s引用另一个字符串：</p>
<p>String a=”aaa”;//创建的对象aaa赋给引用变量a<br>a=”abc”;//又新创建了另一个对象abc,并赋给引用变量a(即不再建立引用变量a和对象aaa之间的联系)，并没有改变对象aaa的内容<br>System.out.println(a);//控制台输出abc</p>
<p>可以想象成各种字符串存放在公共的存储池中，引用变量可以指向存储池中存放相应字符串的位置（引用变量指向存放相关字符串的堆）。</p>
<p>如果：</p>
<p>String a=”sss”;</p>
<p>String b=”sss”;//表示引用变量a和b都指向存放字符串sss的位置</p>
<p>4.3的效率要高于4.2。</p>
<p>4.4</p>
<p>String a=”aaa”;</p>
<p>String a=”bbb”;</p>
<p>此时String类型的对象aaa不再被使用，系统最终会自动将其回收，因此不会产生内存泄露，即垃圾回收机制。</p>
<p>注意：在Java中不能修改字符串里的单个字符，但是在C++中可以，Java和C++都有上述的垃圾回收机制。</p>
]]></content>
  </entry>
  <entry>
    <title>第一章Java程序概述（一）</title>
    <url>/2020/06/11/%E7%AC%AC%E4%B8%80%E7%AB%A0Java%E7%A8%8B%E5%BA%8F%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<hr>
<p>第一章Java的基本程序设计结构</p>
<p>软件安装：安装JDK</p>
<p>微信公众号“唠码客”往期文章</p>
<p>安装IDEA</p>
<p>微信公众号“唠码客”往期文章</p>
<p>创建第一个Java程序参考链接： <a href="https://www.cnblogs.com/hanwen1014/p/9053492.html" target="_blank" rel="noopener">https://www.cnblogs.com/hanwen1014/p/9053492.html</a> </p>
 <a id="more"></a> 

<p>一、一个简单的Java应用程序</p>
<p>1类名的标准命名规则：类名以大写字母做开头，后面可以是数字或字母，若类名由多个单词构成则每个单词的首字母应大写。</p>
<p>例：CamelCase</p>
<p>2一个Java文件只能有一个public类，且公共类名（HelloWord）必须与java源文件名（如HelloWord.java）相同。一个程序可以有多个类但只能有一个public类，也只允许有一个起点即一个main方法。</p>
<p>3main方法：Java的源文件里必须包含一个main方法。main方法是Java程序运行的起点。Java语言规范：mian方法必须声明为public，必须是静态的。</p>
<p>4块：Java中用{}划分程序的各个部分，通常称为块。以“{”开始，以“}”结束。一般习惯把匹配的大括号上下对齐。</p>
<p>5Java中每个语句必须以分号结束，回车不是一条语句的结束标志，因此，如果需要，可以将一条语句写在多行。</p>
<p>6System.out.print(“aSdafa”);//使用System.out对象的print方法。</p>
<p>7参数：有的程序员也把参数叫做实参。</p>
<p>二、注释</p>
<p>1Java有三种注释形式。</p>
<p>1.1//：注释内容从//到本行结束</p>
<p>1.2多行注释：/<em><em>/，注释内容从/</em>开始到</em>/结束。</p>
<p>这种多行注释不能嵌套注释，/<em><em>/是从第一个/</em>开始到第一个</em>/结束：</p>
<p>/<em>/</em>System.out.println(“qwe<em>/“);</em>/</p>
<p>1.3文档化注释（在第二章详细介绍）：/<strong>注释部分*/，这种注释可以用来自动的生成文档。也可以用来注释多行，由/</strong>开始到*/结束。</p>
<p>三、数据类型</p>
<p>1.1一共8种基本数据类型:四种整型分别是int,short,long,byte;两种浮点类型分别是float,double;一种字符类型char;一种用于表示真值的boolean类型。</p>
<p>1.2表示长整型(long)需要后缀一个L或l,如：40000L；表示十六进制要有前缀0x或0X.如：0x10表示十进制16；表示八进制要有前缀0.如：010表示十进制8；表示二进制要有前缀0b或0B.如：0b10表示十进制2。</p>
<p>1.3可以在数的中间加下划线，如：2_000_000表示2000000，下划线是为了让人们更易读，编译时Java编译器会除去这些下划线。</p>
<p>1.4浮点类型</p>
<p>1.4.1单精度类型float：有效位数为6~7位。如float a=2.4;</p>
<p>float类型的数值需要加一个后缀F或f,如3.14F.没有后缀F或f的浮点数会默认为double类型，当然浮点数也可以后缀D或d,如3.14D。</p>
<p>双精度类型double:有效位数位15位。</p>
<p>1.4.2可以使用十六进制表示浮点数，如十进制0.125用十六进制表示为0x1.0p-3：即1.0*2的-3次方。其中1.0这里用十六进制表示，表示指数，指数的基数为2，-3这里用十进制表示。</p>
<p>1.4.3用于表示溢出和出错情况的三个特殊的浮点值：</p>
<p>正无穷大：Double.POSITIVE_INFINITY</p>
<p>负无穷大：Double.NEGATIVE_INFINITY</p>
<p>NaN:不是一个数字</p>
<p>例如一个正的浮点数除以0的结果为正无穷大，计算0.0/0或负数的平方根的结果为NaN。</p>
<p>double a = 0.0 / 0;//此时a并不是一个数<br>if <strong>(</strong>Double.<strong>isNaN**</strong>(<strong>a</strong>)) {<strong>//检验a是否是一个数值<br>  System.</strong>out<strong>.println</strong>(<strong>“a不是一个数值”</strong>)<strong>;<br>  System.</strong>out<strong>.println</strong>(<strong>a</strong>)<strong>;//控制台输出NaN<br>**}</strong> else <strong>{**</strong><br>**  System.<strong>out</strong>.println<strong>(</strong>“a的数值是：”+a<strong>)</strong>;<br><strong>}</strong> ;</p>
<p>1.4.4浮点数不适用于无法接收舍入误差的金融计算</p>
<p>浮点数值采用二进制系统表示，即只能精确到0.5（此0.5是十进制）而二进制系统无法精确到1/10，，就好像十进制无法精确表示1/3，所以:</p>
<p>System.<strong>out</strong>.println<strong>(</strong>2.0-1.1<strong>)</strong>;//控制台输出：0.8999999999999999</p>
<p>如果数值计算中不允许有任何舍入误差，就应该使用BigDecimal类，本章稍后讲。</p>
<p>1.5char类型</p>
<p>‘A’是编码值为65的字符常量，它与“A”不同，“A”是包含一个字符A的字符串，char类型的值还可以表示为十六进制，其范围从\u0000到\uFFFF。Unicode字符可以用一个char值描述或者两个char值描述。以下为部分特殊字符的转义序列：</p>
<p>转义序列        名称        Unicode值</p>
<p>\t                制表        \u0009</p>
<p>\n                换行        \u000a</p>
<p>\r                回车        \u000d</p>
<p>\”                双引号    \u0022</p>
<p>所有的转义序列都可以出现在字符中或字符串中，如：</p>
<p>System.<strong>out</strong>.println<strong>(</strong>“a”+”\u0009”+”d”<strong>)</strong>;//输出a    d</p>
<p>System.<strong>out</strong>.println<strong>(</strong>“a”+”\t”+”d”<strong>)</strong>;//输出a    d</p>
<p>System.<strong>out</strong>.println<strong>(</strong>“a”+’\t’+”d”<strong>)</strong>;//输出a    d</p>
<p>System.<strong>out</strong>.println<strong>(</strong>“a”+’\0009’+”d”<strong>)</strong>;//输出a    d</p>
<p>Unicode转义序列会在解析代码之前得到处理，如：”\u0022+\u0022”在编译前\u0022会先转换成”，因此编译后会得到””+””,也就是一个空字符串。更为隐秘的是在注释中出现：// \u000a。。。。。，编译时会有语法错误，在编译代码前会先把 \u000a替换成一个换行符，此时等效于：</p>
<p>//（换行了）</p>
<p>。。。。。</p>
<p>能用字符串类型表示就不要用字符类型。</p>
<p>1.6布尔型</p>
<p>在Java中整型值和布尔值无法相互转换。如下情况会发生编译错误：</p>
<p>int i = 0;<br>if (i = 0) {<br>  System.out.println(“sdfsf”);<br>}</p>
]]></content>
  </entry>
  <entry>
    <title>第一章Java程序概述（二）</title>
    <url>/2020/06/12/%E7%AC%AC%E4%B8%80%E7%AB%A0Java%E7%A8%8B%E5%BA%8F%E6%A6%82%E8%BF%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<hr>
<p>四、变量和常量</p>
<p>1变量</p>
<p>1.1int i,j;不提倡一行声明多个变量这种风格，逐一声明每个变量可以提高程序的可读性。在Java中变量的声明尽可能靠近变量第一次使用的地方。</p>
<p>1.2从Java10开始，如果从变量的初始值就可以推断出它的类型，就不再需要声明类型，只需要使用关键字var而无需指定类型：</p>
<p>var i = 0;</p>
 <a id="more"></a> 

<p>1.3在C和C++中，区分变量的声明和定义，如：</p>
<p>int i;//声明</p>
<p>int i=10;定义</p>
<p>在Java中并不区分变量的声明和定义。</p>
<p>2常量</p>
<p>2.1</p>
<p>用关键字final表示常量，如：final ABC=0;</p>
<p>关键词final表示这个变量只能被赋值一次，一旦被赋值之后就不能再更改，习惯上常量名全部大写。</p>
<p>2.2类常量</p>
<p>类常量：Java中经常希望某个常量可以在一个类的多个方法中使用，可以使用static final设置一个类常量，如：</p>
<p>public class HelloHa {</p>
<p>  public static final int <strong>ABC</strong> = 0;</p>
<p>  public static void main<strong>(</strong>String<strong>[]</strong> args) {</p>
<p>}</p>
<p>public void aaa(){</p>
<p>}</p>
<p>}</p>
<p>注意：类常量的定义在类的方法的外部。因此在同一个类的其他方法里也可以使用此常量。</p>
<p>3如果一个常量被声明为public，那么其他类的方法也可以使用这个常量。</p>
<p>CSDN：把其他类的变量设置为public static，即静态公共变量，直接用类名.变量名获取（不可以只写变量名）。但是这个方法最好只用于基础数据变量（int/long/boolean/double/byte等），否则会造成内存泄漏。例：</p>
<p>class Aaa {<br>  public static final int <strong>q</strong> = 0;<br>  void aaa() {</p>
<p>}<br>}</p>
<p>public class HelloHa {</p>
<p>  public static void main<strong>(</strong>String<strong>[]</strong> args) {<br>   System.<strong>out</strong>.println<strong>(</strong>Aaa.<strong>q)</strong>;<br>      }</p>
<p>}</p>
<p>4枚举类型（详细内容在第三章介绍）</p>
<p>enum Size <strong>{S</strong>, <strong>M</strong>, <strong>L</strong>, <strong>X}</strong>//定义枚举类型</p>
<p>public class HelloHa {</p>
<p>   public static void main<strong>(</strong>String<strong>[]</strong> args) {</p>
<p>​      Size s = Size.<strong>S</strong>;//声明枚举类型的变量，Size类型的变量只能存储这个类型声明中给定的某个枚举值或者特殊值null,null表示这个变量没有设置任何值</p>
<p> }</p>
<p>}</p>
<p>五、运算符</p>
<p>1算数运算符，如：+，-，*，/，%（求余又称取模）</p>
<p>整数被零除（5.0/0）会产生一个异常，而浮点数被零除会得到无穷大或NaN结果。</p>
<p>若表达式a/b的商为负数，则商会向0取整；a%b的余数的定义是（a/b）*b+a%b的值恒等于a。例如：-14/3和14/-3的商都是-4，但-14%3是-2，而14%-3是2。</p>
<p>2数值类型的转换</p>
<p>2.1自动转换（隐式的）</p>
<p>当用一个二元运算符连接两个值时，会先自动将两个操作数转换成同一种类型，然后再进行计算：</p>
<p>如果两个操作数中有一个是double类型，另一个操作数就会转换成double类型。</p>
<p>否则，如果其中一个操作数是float类型，另一个操作数就会转换成float类型。</p>
<p>否则，如果其中一个操作数是long类型，另一个操作数就会转换成long类型。</p>
<p>否则，如果其中一个操作数是int类型，另一个操作数就会转换成int类型。</p>
<p>2.2强制类型转换（显式的）</p>
<p>强制类型转换：如有时需要将double类型转换成int类型，且有可能有时会丢掉一些信息。</p>
<p>强制类型转换的语法格式是在圆括号中给出想要转换的目标类型，后面紧跟带转换的变量名，如：</p>
<p>double i=9.999;</p>
<p>int j=(int)i;//j是9</p>
<p>j的值是9，因为强制类型转换是通过截断小数点部分将浮点值转换成整型。</p>
<p>如果想对浮点数进行舍入运算，以便得到最接近的整数（很多情况下这种操作更有用），那就需要使用Math.round方法：</p>
<p>double i=9.999;</p>
<p>int j=(int)Math.round(i);//j是10</p>
<p>当调用round方法时，仍然需要使用显式的强制类型转换，因为round方法返回的结果是long类型，由于存在信息丢失的可能性，所以只有使用显式的强制类型转换才能将long类型转换成int类型。</p>
<p>警告：如果试图将一个数值强制转换成另一种类型时，这个数值超出了目标类型的表示范围，结果就会截断成一个完全不同的值，如：</p>
<p>(byte)300;//实际输出值为44</p>
<p>3结合赋值和运算符</p>
<p>在赋值中使用运算符的简写形式：x+=1;//等效于x=x+1</p>
<p>如果右侧操作数的类型和左侧操作数的类型不同，就会发生自动的发生强制转换（运算符简写形式下，不写强制类型的语法格式也是合法的）或自动转换，如：</p>
<p>int x = 1;<br>x += 1.5;//将double强制转换成int，先(int)(x+1.5)<br>System.<strong>out</strong>.println<strong>(</strong>x<strong>)</strong>;//输出2</p>
<p>4自增和自减运算符</p>
<p>i++或++i，自增和自减运算符改变的变量的值，不能作用于数值的本身，即不能：6++</p>
<p>5关系运算符和boolean运算符</p>
<p>&amp;&amp;和||运算符是按照”短路”方式求值的：若第通过一个操作数就能确定表达式的值，则不会再判断第二个操作数的值。</p>
<p>&amp;和|不遵循短路求值</p>
<p>三元运算符：x&lt;y?x:y//如果x&lt;y则返回x</p>
]]></content>
  </entry>
  <entry>
    <title>Happy Every Day</title>
    <url>/2020/06/09/%E7%AC%AC%E4%B8%89%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p><img src="/2020/06/09/%E7%AC%AC%E4%B8%89%E7%AF%87%E5%8D%9A%E5%AE%A2/aaa.jpg" alt="aaa"></p>
]]></content>
  </entry>
</search>
